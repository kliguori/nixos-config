{ config, lib, pkgs, ... }: 

let
  defaultNetXml = builtins.readFile ./default.xml;
in {
  imports =[ 
    ./hardware-configuration.nix                            # Include hardware config (generated by NixOS)
    ./users.nix                                             # Include users
    ./samba.nix                                             # Include Samba configuration
    ../../system/common/common.nix                          # Include common settings/services/programs
  ];

  # DO NOT CHANGE
  system.stateVersion = "25.05";

  # Boot settings
  boot = {
    
    kernelParams = [ 
      "consoleblank=300"           # Turn off screen after 5 minutes
      "zfs.zfs_arc_max=4294967296" # Limit ZFS ARC size to 4GiB
    ];
    
    # Bootloader settings
    loader = { 
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
    };
    
    # ZFS settings
    supportedFilesystems = [ "zfs" ];
    zfs.extraPools = [ 
      "rpool" 
      "data-pool"
      ];
    # rollback root to blank snapshot (note the lib.mkAfter means this command appends, not replaces others)
    initrd.postDeviceCommands = lib.mkAfter ''
      zpool import -N rpool
      zfs rollback -r rpool/root@blank
    '';
    initrd.luks.devices."crypt-data".device = "/dev/disk/by-label/luks-storage-drive";
  };

  # Bind-mount persistant directories
  fileSystems."/etc/NetworkManager/system-connections" = {
    device = "/persist/etc/NetworkManager/system-connections";
    options = [ "bind" ];
  };

  # # Tailscale state
  # fileSystems."/var/lib/tailscale" = {
  #   device = "/persist/var/lib/tailscale";
  #   options = [ "bind" ];
  # };

  # # Samba state
  # fileSystems."/var/lib/samba" = {
  #   device = "/persist/var/lib/samba";
  #   options = [ "bind" ];
  # };

  # Admin user SSH keys
  fileSystems."/home/admin/.ssh" = {
    device = "/persist/home/admin/.ssh";
    options = [ "bind" ];
  };

  # nixos-config
  fileSystems."/home/admin/nixos-config" = {
    device = "/persist/home/admin/nixos-config";
    options = [ "bind" ];
  };

  # Mount data-pool datasets
  fileSystems."/srv/media/movies" = {
    device = "data-pool/media/movies";
    fsType = "zfs";
  };

  fileSystems."/srv/media/tv" = {
    device = "data-pool/media/tv";
    fsType = "zfs";
  };

  fileSystems."/srv/users/kevin" = {
    device = "data-pool/users/kevin";
    fsType = "zfs";
  };

  fileSystems."/srv/users/jane" = {
    device = "data-pool/users/jane";
    fsType = "zfs";
  };

  fileSystems."/srv/users/shared" = {
    device = "data-pool/users/shared";
    fsType = "zfs";
  };

  fileSystems."/srv/photos" = {
    device = "data-pool/photos";
    fsType = "zfs";
  };

  fileSystems."/var/lib/libvirt/images/home-assistant" = {
    device = "data-pool/virtual-machines/home-assistant";
    fsType = "zfs";
  };


  # Set directory/file permissions and create symlinks
  systemd.tmpfiles.rules = [
    # Permissions for bind mounted directories (also creates directories if they don't exist)
    "d /persist/etc/NetworkManager/system-connections 0700 root root - -" # NetworkManager connections
    "d /persist/home/admin/.ssh 0700 admin users - -" # Admin user SSH keys
    "d /persist/home/admin/nixos-config 0755 admin users - -" # nixos-config
    
    # Permissions for symlinked files (also creates file and parent directories if they don't exist)
    "f /persist/home/admin/.gitconfig 0644 admin users - -" # Git configuration

    # Symlink persistent files
    "L+ /home/admin/.gitconfig - - - - /persist/home/admin/.gitconfig" # Symlink .gitconfig
  ];

  # Networking
  networking = {
    hostName = "mycroft";
    hostId = "ba087eb7";
    networkmanager.enable = true;
    firewall = {
      enable = true;
      allowedTCPPorts = [ 22 8123 ]; # Open ports for web services
      allowedUDPPorts = [  ]; # DNS
      logRefusedConnections = true; # Log refused connections
    };
    nat = {
      enable = true;
      internalInterfaces = [ "virbr0" ]; # Use the libvirt bridge for NAT
      externalInterface = [ "lo" "tailscale0" ]; # Use the all external interfaces
      internalIPs = [ "192.168.122.0/24" ];
      forwardPorts = [
        {
          sourcePort = 8123;
          destination = "192.168.122.10:8123";
          proto = "tcp";
        }
      ];
    };
  };

  # Bluetooth settings
  services.blueman.enable = false;

  # Host specific system packages
  environment.systemPackages = with pkgs; [
    libvirt
    virt-manager
    qemu
  ];

  # Enable SSH for remote management
  services.openssh = {
    enable = true;
    settings = {
      PermitRootLogin = "no";
      PasswordAuthentication = false;
    };
  };  

  # Services
  services = {
    jellyfin.enable = true;
    vaultwarden.enable = false;
    immich = {
      enable = false;
      port = 2283;
    };
    grafana.enable = false;
    prometheus.enable = false;
    netbird.enable = false;
    homepage-dashboard.enable = false;
    nfs.server.enable = false;
  };

    # Enable virtualization
  virtualisation = {
    docker.enable = true;              # Enable docker
    libvirtd = {                       # Enable QEMU and KVM
        enable = true;
        qemu = {
          package = pkgs.qemu_kvm;
          ovmf.enable = true; # Enable OVMF for UEFI support
          runAsRoot = true; # Allow running as root
        };
    };
  };
 
  # Note, this only writes the default.xml file to /etc/libvirt/qemu/networks/default.xml
  # All the libvirt network management must be done imperatively using virsh commands
  # First, take down any virtual machines that might be using the network
  # To check the status of the network, use:
  #   virsh net-list --all
  # Then take down the machines using the network:
  #   virsh shutdown <vm-name> (preferred)
  #   virsh destroy <vm-name>  (forceful)
  # To remove an old network, use:
  #   virsh net-destroy default
  #   virsh net-undefine default
  # To define the network, use:
  #   virsh net-define /etc/libvirt/qemu/networks/default.xml
  # To start the network, use:
  #   virsh net-start default
  # To autostart the network, use:
  #   virsh net-autostart default
  # Bring the virtual machines back up:
  #   virsh start <vm-name>
  # To check the status of the network, use:
  #   virsh net-info default
  # To check the status of the libvirt service, use:
  #   systemctl status libvirtd.service
  systemd.services.libvirt-define-default-net = {
    description = "Define default libvirt NAT network when libvirtd starts";
    wantedBy = [ "multi-user.target" ];
    after = [ "libvirtd.service" ];
    serviceConfig = {
      Type = "oneshot";
      ExecStart = pkgs.writeShellScript "libvirt-define-network" ''
        mkdir -p /etc/libvirt/qemu/networks
        echo '${defaultNetXml}' > /etc/libvirt/qemu/networks/default.xml
      '';
    };
  };

  users.mutableUsers = false;
  users.users.root.hashedPassword = "$y$j9T$PtbhYydbhh.z0qInjgrQS1$0oLkk3FlJztVtmVJqpWQWCDs8kdX2zzMkJKQkkzAtu9";

}
