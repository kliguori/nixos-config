{ config, lib, pkgs, ... }: 

{
  imports =[ 
    ./hardware-configuration.nix                            # Include hardware config (generated by NixOS)
    ./desktop-environment.nix                               # Include desktop environments
    ./users.nix                                             # Include users
    ../../system/common/common.nix                          # Include common settings/services/programs
  ];

  # DO NOT CHANGE
  system.stateVersion = "25.05";

  # Set desktop environment
  desktopEnv = "hyprland";

  # Boot settings
  boot = {
    loader = { 
      systemd-boot.enable = true;
      efi.canTouchEfiVariables = true;
    };
    supportedFilesystems = [ "zfs" ];
    zfs.extraPools = [ "rpool" ];
    # rollback root to blank snapshot (note the lib.mkAfter means this command appends, not replaces others)
    initrd.postDeviceCommands = lib.mkAfter ''
      zpool import -N rpool
      zfs rollback -r rpool/root@blank
    '';
  };

  services.zfs.autoScrub.enable = true; # Enable automatic scrubbing of ZFS pools

  # Symlink etc files after recreating root
  systemd.tmpfiles.rules = [
    "d /persist/var/lib/tailscale 0700 root root - -" 
    "d /persist/etc/NetworkManager/system-connections 0700 root root - -"
    "L+ /etc/NetworkManager/system-connections - - - - /persist/etc/NetworkManager/system-connections"
  ];

  # Networking
  networking = {
    hostName = "watson";
    hostId = "36306665"; # head -c4 /dev/urandom | od -A none -t x4
    networkmanager.enable = true;
  };

  # Bluetooth settings
  services.blueman.enable = true; # Enable blueman
  hardware.bluetooth = {
    enable = true;                # Enable Bluetooth
    powerOnBoot = false;          # Don't turn bluetooth on at boot
  };

  # Host specific system packages
  environment.systemPackages = with pkgs; [];

  users.users.root.hashedPassword = "$y$j9T$PtbhYydbhh.z0qInjgrQS1$0oLkk3FlJztVtmVJqpWQWCDs8kdX2zzMkJKQkkzAtu9";

  # Tailscale state
  fileSystems."/var/lib/tailscale" = {
    device = "/persist/var/lib/tailscale";
    options = [ "bind" ];
  };

  services.jellyfin.enable = false;

}
